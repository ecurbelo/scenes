"use strict";(self.webpackChunkwebsite=self.webpackChunkwebsite||[]).push([[102],{876:(e,a,t)=>{t.d(a,{Zo:()=>d,kt:()=>b});var n=t(2784);function r(e,a,t){return a in e?Object.defineProperty(e,a,{value:t,enumerable:!0,configurable:!0,writable:!0}):e[a]=t,e}function l(e,a){var t=Object.keys(e);if(Object.getOwnPropertySymbols){var n=Object.getOwnPropertySymbols(e);a&&(n=n.filter((function(a){return Object.getOwnPropertyDescriptor(e,a).enumerable}))),t.push.apply(t,n)}return t}function i(e){for(var a=1;a<arguments.length;a++){var t=null!=arguments[a]?arguments[a]:{};a%2?l(Object(t),!0).forEach((function(a){r(e,a,t[a])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(t)):l(Object(t)).forEach((function(a){Object.defineProperty(e,a,Object.getOwnPropertyDescriptor(t,a))}))}return e}function s(e,a){if(null==e)return{};var t,n,r=function(e,a){if(null==e)return{};var t,n,r={},l=Object.keys(e);for(n=0;n<l.length;n++)t=l[n],a.indexOf(t)>=0||(r[t]=e[t]);return r}(e,a);if(Object.getOwnPropertySymbols){var l=Object.getOwnPropertySymbols(e);for(n=0;n<l.length;n++)t=l[n],a.indexOf(t)>=0||Object.prototype.propertyIsEnumerable.call(e,t)&&(r[t]=e[t])}return r}var o=n.createContext({}),u=function(e){var a=n.useContext(o),t=a;return e&&(t="function"==typeof e?e(a):i(i({},a),e)),t},d=function(e){var a=u(e.components);return n.createElement(o.Provider,{value:a},e.children)},p="mdxType",c={inlineCode:"code",wrapper:function(e){var a=e.children;return n.createElement(n.Fragment,{},a)}},m=n.forwardRef((function(e,a){var t=e.components,r=e.mdxType,l=e.originalType,o=e.parentName,d=s(e,["components","mdxType","originalType","parentName"]),p=u(t),m=r,b=p["".concat(o,".").concat(m)]||p[m]||c[m]||l;return t?n.createElement(b,i(i({ref:a},d),{},{components:t})):n.createElement(b,i({ref:a},d))}));function b(e,a){var t=arguments,r=a&&a.mdxType;if("string"==typeof e||r){var l=t.length,i=new Array(l);i[0]=m;var s={};for(var o in a)hasOwnProperty.call(a,o)&&(s[o]=a[o]);s.originalType=e,s[p]="string"==typeof e?e:r,i[1]=s;for(var u=2;u<l;u++)i[u]=t[u];return n.createElement.apply(null,i)}return n.createElement.apply(null,t)}m.displayName="MDXCreateElement"},2687:(e,a,t)=>{t.r(a),t.d(a,{assets:()=>o,contentTitle:()=>i,default:()=>c,frontMatter:()=>l,metadata:()=>s,toc:()=>u});var n=t(7896),r=(t(2784),t(876));const l={id:"variables",title:"Variables"},i=void 0,s={unversionedId:"variables",id:"variables",title:"Variables",description:"Variables are used to parameterize a scene. They are placeholders for a value that can be used in queries, panel titles, and even custom scene objects. Learn more about Grafana template variables in the official Grafana documentation.",source:"@site/../docs/variables.md",sourceDirName:".",slug:"/variables",permalink:"/scenes/docs/variables",draft:!1,editUrl:"https://github.com/grafana/scenes/edit/main/docusaurus/website/../docs/variables.md",tags:[],version:"current",frontMatter:{id:"variables",title:"Variables"},sidebar:"sidebar",previous:{title:"Visualizations",permalink:"/scenes/docs/visualizations"},next:{title:"Transformations",permalink:"/scenes/docs/transformations"}},o={},u=[{value:"Supported variable types",id:"supported-variable-types",level:2},{value:"Add variables to scenes",id:"add-variables-to-scenes",level:2},{value:"Step 1. Create and customize a variable object",id:"step-1-create-and-customize-a-variable-object",level:3},{value:"Step 2. Configure a scene to use variables",id:"step-2-configure-a-scene-to-use-variables",level:3},{value:"Step 3. Show a variables picker in the scene",id:"step-3-show-a-variables-picker-in-the-scene",level:3},{value:"Step 4. Use the variable in a query",id:"step-4-use-the-variable-in-a-query",level:3},{value:"Step 5. Add data to the scene",id:"step-5-add-data-to-the-scene",level:3},{value:"Step 6. Add a visualization to the scene",id:"step-6-add-a-visualization-to-the-scene",level:3},{value:"Macros",id:"macros",level:2},{value:"Global macros",id:"global-macros",level:3},{value:"Field / series macros",id:"field--series-macros",level:3},{value:"Value / row macros",id:"value--row-macros",level:3}],d={toc:u},p="wrapper";function c(e){let{components:a,...t}=e;return(0,r.kt)(p,(0,n.Z)({},d,t,{components:a,mdxType:"MDXLayout"}),(0,r.kt)("p",null,"Variables are used to parameterize a scene. They are placeholders for a value that can be used in queries, panel titles, and even custom scene objects. Learn more about Grafana template variables in ",(0,r.kt)("a",{parentName:"p",href:"https://grafana.com/docs/grafana/latest/dashboards/variables/"},"the official Grafana documentation"),"."),(0,r.kt)("h2",{id:"supported-variable-types"},"Supported variable types"),(0,r.kt)("p",null,"Scenes support the following variable types:"),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},"Query variable (",(0,r.kt)("inlineCode",{parentName:"li"},"QueryVariable"),") - Query-generated list of values such as metric names, server names, sensor IDs, data centers, and so on."),(0,r.kt)("li",{parentName:"ul"},"Data source variable (",(0,r.kt)("inlineCode",{parentName:"li"},"DataSourceVariable"),") - Defines the list of data sources of a given type."),(0,r.kt)("li",{parentName:"ul"},"Custom variable (",(0,r.kt)("inlineCode",{parentName:"li"},"CustomVariable"),") - Defines variable options manually, using a comma-separated list."),(0,r.kt)("li",{parentName:"ul"},"Constant variable (",(0,r.kt)("inlineCode",{parentName:"li"},"ConstantVariable"),") - Defines a constant value variable."),(0,r.kt)("li",{parentName:"ul"},"Text box variable (",(0,r.kt)("inlineCode",{parentName:"li"},"TextBoxVariable"),") - Displays a free text input field with an optional default value.")),(0,r.kt)("h2",{id:"add-variables-to-scenes"},"Add variables to scenes"),(0,r.kt)("p",null,"Follow these steps to add variables to a scene."),(0,r.kt)("h3",{id:"step-1-create-and-customize-a-variable-object"},"Step 1. Create and customize a variable object"),(0,r.kt)("p",null,"Start with a variable definition. The following code creates a variable that retrieves all ",(0,r.kt)("inlineCode",{parentName:"p"},"handler")," label values for the ",(0,r.kt)("inlineCode",{parentName:"p"},"prometheus_http_requests_total")," metric from the Prometheus data source:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-ts"},"const handler = new QueryVariable({\n  name: 'handler',\n  datasource: {\n    type: 'prometheus',\n    uid: '<PROVIDE_GRAFANA_DS_UID>',\n  },\n  query: {\n    query: 'label_values(prometheus_http_requests_total,handler)',\n  },\n});\n")),(0,r.kt)("admonition",{type:"note"},(0,r.kt)("p",{parentName:"admonition"},"The ",(0,r.kt)("inlineCode",{parentName:"p"},"datasource")," used in the preceding code block refers to the core Grafana Prometheus data source plugin. Make sure your Grafana stack has this plugin installed and configured. The ",(0,r.kt)("inlineCode",{parentName:"p"},"query")," property is the same one that you would see\nin typical dashboard template variables when you view the dashboard JSON in the dashboard settings.")),(0,r.kt)("h3",{id:"step-2-configure-a-scene-to-use-variables"},"Step 2. Configure a scene to use variables"),(0,r.kt)("p",null,"Define a ",(0,r.kt)("inlineCode",{parentName:"p"},"$variables")," property for your scene using the ",(0,r.kt)("inlineCode",{parentName:"p"},"SceneVariableSet")," object:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-ts"},"const myScene = new EmbeddedScene({\n  $variables: new SceneVariableSet({\n    variables: [labels],\n  }),\n  body: new SceneFlexLayout({\n    children: [],\n  }),\n});\n")),(0,r.kt)("h3",{id:"step-3-show-a-variables-picker-in-the-scene"},"Step 3. Show a variables picker in the scene"),(0,r.kt)("p",null,"Use the ",(0,r.kt)("inlineCode",{parentName:"p"},"controls")," property of ",(0,r.kt)("inlineCode",{parentName:"p"},"EmbeddedScene")," to show variable value pickers on top of the scene:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-ts"},"const myScene = new EmbeddedScene({\n  $variables: new SceneVariableSet({\n    variables: [labels],\n  }),\n  body: new SceneFlexLayout({\n    children: [],\n  }),\n  controls: [new VariableValueSelectors({})],\n});\n")),(0,r.kt)("p",null,"A selector that allows you to change the variable value is now shown on top of the scene."),(0,r.kt)("h3",{id:"step-4-use-the-variable-in-a-query"},"Step 4. Use the variable in a query"),(0,r.kt)("p",null,"Create ",(0,r.kt)("inlineCode",{parentName:"p"},"SceneQueryRunner"),", which will query the Prometheus data source and use the configured variable in the query:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-ts"},"const queryRunner = new SceneQueryRunner({\n  datasource: {\n    type: 'prometheus',\n    uid: '<PROVIDE_GRAFANA_DS_UID>',\n  },\n  queries: [\n    {\n      refId: 'A',\n      range: true,\n      format: 'time_series',\n      expr: 'rate(prometheus_http_requests_total{handler=\"$handler\"}[5m])',\n    },\n  ],\n});\n")),(0,r.kt)("p",null,"Note, the ",(0,r.kt)("inlineCode",{parentName:"p"},"expr")," property of the Prometheus query uses the ",(0,r.kt)("inlineCode",{parentName:"p"},"$handler")," variable. Learn more about Grafana's variable syntax in ",(0,r.kt)("a",{parentName:"p",href:"https://grafana.com/docs/grafana/latest/dashboards/variables/variable-syntax/"},"the official Grafana documentation"),"."),(0,r.kt)("h3",{id:"step-5-add-data-to-the-scene"},"Step 5. Add data to the scene"),(0,r.kt)("p",null,"Connect ",(0,r.kt)("inlineCode",{parentName:"p"},"queryRunner"),", which was created in the previous step, with the scene:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-ts"},"const myScene = new EmbeddedScene({\n  $variables: new SceneVariableSet({\n    variables: [labels],\n  }),\n  $data: queryRunner,\n  body: new SceneFlexLayout({\n    children: [],\n  }),\n  controls: [new VariableValueSelectors({})],\n});\n")),(0,r.kt)("h3",{id:"step-6-add-a-visualization-to-the-scene"},"Step 6. Add a visualization to the scene"),(0,r.kt)("p",null,"To show the results of the query using the ",(0,r.kt)("inlineCode",{parentName:"p"},"handler")," variable, add a time series visualization to the scene using the ",(0,r.kt)("inlineCode",{parentName:"p"},"VizPanel")," class:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-ts"},"const myScene = new EmbeddedScene({\n  $variables: new SceneVariableSet({\n    variables: [labels],\n  }),\n  $data: queryRunner,\n  body: new SceneFlexLayout({\n    children: [\n      new SceneFlexItem({\n        body: new VizPanel({\n          pluginId: 'timeseries',\n        }),\n      }),\n    ],\n  }),\n  controls: [new VariableValueSelectors({})],\n});\n")),(0,r.kt)("p",null,"Change the variable value using the selector on top of the scene to see updated data in your visualization."),(0,r.kt)("p",null,"Following, you'll find the complete code of a scene using ",(0,r.kt)("inlineCode",{parentName:"p"},"QueryVariable"),":"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-ts"},"const labels = new QueryVariable({\n  name: 'labels',\n  datasource: {\n    type: 'prometheus',\n    uid: '<PROVIDE_GRAFANA_DS_UID>',\n  },\n  query: {\n    query: 'label_values(prometheus_http_requests_total,handler)',\n  },\n});\n\nconst queryRunner = new SceneQueryRunner({\n  datasource: {\n    type: 'prometheus',\n    uid: '<PROVIDE_GRAFANA_DS_UID>',\n  },\n  queries: [\n    {\n      refId: 'A',\n      range: true,\n      format: 'time_series',\n      expr: 'rate(prometheus_http_requests_total{handler=\"$handler\"}[5m])',\n    },\n  ],\n});\n\nconst myScene = new EmbeddedScene({\n  $variables: new SceneVariableSet({\n    variables: [labels],\n  }),\n  $data: queryRunner,\n  body: new SceneFlexLayout({\n    children: [\n      new SceneFlexItem({\n        body: new VizPanel({\n          pluginId: 'timeseries',\n        }),\n      }),\n    ],\n  }),\n  controls: [new VariableValueSelectors({})],\n});\n")),(0,r.kt)("h2",{id:"macros"},"Macros"),(0,r.kt)("p",null,"The variables system supports a variety of built-in macros, which are variable expressions that can be used without the need to include any additional variables."),(0,r.kt)("h3",{id:"global-macros"},"Global macros"),(0,r.kt)("table",null,(0,r.kt)("thead",{parentName:"table"},(0,r.kt)("tr",{parentName:"thead"},(0,r.kt)("th",{parentName:"tr",align:null},"Syntax"),(0,r.kt)("th",{parentName:"tr",align:null},"Description"))),(0,r.kt)("tbody",{parentName:"table"},(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("inlineCode",{parentName:"td"},"${___url}")),(0,r.kt)("td",{parentName:"tr",align:null},"The current URL")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("inlineCode",{parentName:"td"},"${__url.path}")),(0,r.kt)("td",{parentName:"tr",align:null},"Current URL without query parameters")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("inlineCode",{parentName:"td"},"${__url.params}")),(0,r.kt)("td",{parentName:"tr",align:null},"Current URL query params")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("inlineCode",{parentName:"td"},"${__url.params:exclude:var-handler}")),(0,r.kt)("td",{parentName:"tr",align:null},"Current URL query params without ",(0,r.kt)("inlineCode",{parentName:"td"},"var-handler"))),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("inlineCode",{parentName:"td"},"${__url.params:include:var-handler,var-instance}")),(0,r.kt)("td",{parentName:"tr",align:null},"Current URL query params with only ",(0,r.kt)("inlineCode",{parentName:"td"},"var-handler")," and ",(0,r.kt)("inlineCode",{parentName:"td"},"var-instance"))))),(0,r.kt)("p",null,"Use a string similar to the following to create a data link from a table to another page with all query parameters preserved:"),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"/scene-x/my-drilldown-view/${__value.raw}${__url.params}"))),(0,r.kt)("p",null,"Use a string similar to the following to update the current scene URL with a new query parameter or update it if it exists:"),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"/my-scene-url${__url.params:exclude:drilldown-id}&drilldown-id=${__value.raw}"))),(0,r.kt)("p",null,"This will generate a URL with preserved url state but with the drilldown-id query parameter updated to the interpolated value for this specific data link."),(0,r.kt)("h3",{id:"field--series-macros"},"Field / series macros"),(0,r.kt)("p",null,"The following macros work in data links and in field overrides properties like displayName."),(0,r.kt)("table",null,(0,r.kt)("thead",{parentName:"table"},(0,r.kt)("tr",{parentName:"thead"},(0,r.kt)("th",{parentName:"tr",align:null},"Syntax"),(0,r.kt)("th",{parentName:"tr",align:null},"Description"))),(0,r.kt)("tbody",{parentName:"table"},(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("inlineCode",{parentName:"td"},"${__field.name}")),(0,r.kt)("td",{parentName:"tr",align:null},"Will interpolate to the field/series name")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("inlineCode",{parentName:"td"},"${__field.labels.cluster}")),(0,r.kt)("td",{parentName:"tr",align:null},"Will interpolate to value of the cluster label")))),(0,r.kt)("h3",{id:"value--row-macros"},"Value / row macros"),(0,r.kt)("p",null,"The following macros work in row and value based data links."),(0,r.kt)("table",null,(0,r.kt)("thead",{parentName:"table"},(0,r.kt)("tr",{parentName:"thead"},(0,r.kt)("th",{parentName:"tr",align:null},"Syntax"),(0,r.kt)("th",{parentName:"tr",align:null},"Description"))),(0,r.kt)("tbody",{parentName:"table"},(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("inlineCode",{parentName:"td"},"${__value.text}")),(0,r.kt)("td",{parentName:"tr",align:null},"Useful for data links in tables and other visualizations that render rows/values")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("inlineCode",{parentName:"td"},"${__value.raw}")),(0,r.kt)("td",{parentName:"tr",align:null},"Unformatted value")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("inlineCode",{parentName:"td"},"${__data.fields[0].text}")),(0,r.kt)("td",{parentName:"tr",align:null},"Will interpolate to value of the first field/column on the same row")))))}c.isMDXComponent=!0}}]);