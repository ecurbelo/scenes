"use strict";(self.webpackChunkwebsite=self.webpackChunkwebsite||[]).push([[16],{876:(e,t,a)=>{a.d(t,{Zo:()=>l,kt:()=>b});var n=a(2784);function r(e,t,a){return t in e?Object.defineProperty(e,t,{value:a,enumerable:!0,configurable:!0,writable:!0}):e[t]=a,e}function o(e,t){var a=Object.keys(e);if(Object.getOwnPropertySymbols){var n=Object.getOwnPropertySymbols(e);t&&(n=n.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),a.push.apply(a,n)}return a}function s(e){for(var t=1;t<arguments.length;t++){var a=null!=arguments[t]?arguments[t]:{};t%2?o(Object(a),!0).forEach((function(t){r(e,t,a[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(a)):o(Object(a)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(a,t))}))}return e}function i(e,t){if(null==e)return{};var a,n,r=function(e,t){if(null==e)return{};var a,n,r={},o=Object.keys(e);for(n=0;n<o.length;n++)a=o[n],t.indexOf(a)>=0||(r[a]=e[a]);return r}(e,t);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);for(n=0;n<o.length;n++)a=o[n],t.indexOf(a)>=0||Object.prototype.propertyIsEnumerable.call(e,a)&&(r[a]=e[a])}return r}var c=n.createContext({}),d=function(e){var t=n.useContext(c),a=t;return e&&(a="function"==typeof e?e(t):s(s({},t),e)),a},l=function(e){var t=d(e.components);return n.createElement(c.Provider,{value:t},e.children)},u="mdxType",p={inlineCode:"code",wrapper:function(e){var t=e.children;return n.createElement(n.Fragment,{},t)}},m=n.forwardRef((function(e,t){var a=e.components,r=e.mdxType,o=e.originalType,c=e.parentName,l=i(e,["components","mdxType","originalType","parentName"]),u=d(a),m=r,b=u["".concat(c,".").concat(m)]||u[m]||p[m]||o;return a?n.createElement(b,s(s({ref:t},l),{},{components:a})):n.createElement(b,s({ref:t},l))}));function b(e,t){var a=arguments,r=t&&t.mdxType;if("string"==typeof e||r){var o=a.length,s=new Array(o);s[0]=m;var i={};for(var c in t)hasOwnProperty.call(t,c)&&(i[c]=t[c]);i.originalType=e,i[u]="string"==typeof e?e:r,s[1]=i;for(var d=2;d<o;d++)s[d]=a[d];return n.createElement.apply(null,s)}return n.createElement.apply(null,a)}m.displayName="MDXCreateElement"},2701:(e,t,a)=>{a.r(t),a.d(t,{assets:()=>c,contentTitle:()=>s,default:()=>p,frontMatter:()=>o,metadata:()=>i,toc:()=>d});var n=a(7896),r=(a(2784),a(876));const o={id:"advanced-data",title:"Data and time range in custom scene object"},s=void 0,i={unversionedId:"advanced-data",id:"advanced-data",title:"Data and time range in custom scene object",description:"Custom scene objects can use data and time range added to scene to perform additional operations. To read more about data and time range configuration please read Data and time range first.",source:"@site/../docs/advanced-data.md",sourceDirName:".",slug:"/advanced-data",permalink:"/scenes/docs/advanced-data",draft:!1,editUrl:"https://github.com/grafana/scenes/edit/main/docusaurus/website/../docs/advanced-data.md",tags:[],version:"current",frontMatter:{id:"advanced-data",title:"Data and time range in custom scene object"},sidebar:"sidebar",previous:{title:"Activation handlers",permalink:"/scenes/docs/advanced-activation-handlers"},next:{title:"Variables in custom scene objects",permalink:"/scenes/docs/advanced-variables"}},c={},d=[{value:"Use data",id:"use-data",level:2},{value:"Use data in renderer",id:"use-data-in-renderer",level:3},{value:"Use data in custom object class",id:"use-data-in-custom-object-class",level:3},{value:"Use time range",id:"use-time-range",level:2}],l={toc:d},u="wrapper";function p(e){let{components:t,...a}=e;return(0,r.kt)(u,(0,n.Z)({},l,a,{components:t,mdxType:"MDXLayout"}),(0,r.kt)("p",null,"Custom scene objects can use data and time range added to scene to perform additional operations. To read more about data and time range configuration please read ",(0,r.kt)("a",{parentName:"p",href:"./core-concepts#data-and-time-range"},"Data and time range")," first."),(0,r.kt)("h2",{id:"use-data"},"Use data"),(0,r.kt)("p",null,"In custom scene object use ",(0,r.kt)("inlineCode",{parentName:"p"},"sceneGraph.getData(model)")," call to find and subscribe to the closest parent that has a ",(0,r.kt)("inlineCode",{parentName:"p"},"SceneDataProvider"),". What this means is that it will use ",(0,r.kt)("inlineCode",{parentName:"p"},"$data")," set on it's own level or share data with other siblings and scene objects if ",(0,r.kt)("inlineCode",{parentName:"p"},"$data")," is set on any parent level."),(0,r.kt)("h3",{id:"use-data-in-renderer"},"Use data in renderer"),(0,r.kt)("p",null,"In your custom scene object renderer you can subscribe to the closest ",(0,r.kt)("inlineCode",{parentName:"p"},"SceneDataProvider")," by using ",(0,r.kt)("inlineCode",{parentName:"p"},"sceneGraph.getData")," utility:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-ts"},"import { sceneGraph, SceneObjectState, SceneObjectBase, SceneComponentProps } from '@grafana/scenes';\n\ninterface CustomObjectState extends SceneObjectState {\n  // ...\n}\n\nclass CustomObject extends SceneObjectBase<CustomObjectState> {\n  // ...\n}\n\nfunction CustomObjectRenderer({ model }: SceneComponentProps<CustomObject>) {\n  const data = sceneGraph.getData(model).useState();\n\n  return <pre>{JSON.stringify(data)}</pre>;\n}\n")),(0,r.kt)("h3",{id:"use-data-in-custom-object-class"},"Use data in custom object class"),(0,r.kt)("p",null,"You can also use data in your custom object class. To do that use ",(0,r.kt)("a",{parentName:"p",href:"/scenes/docs/advanced-activation-handlers"},"activation handler"),". In the activation handler get the closest ",(0,r.kt)("inlineCode",{parentName:"p"},"SceneDataProvider")," using ",(0,r.kt)("inlineCode",{parentName:"p"},"sceneGraph.getData(this)"),". Then, subscribe to ",(0,r.kt)("inlineCode",{parentName:"p"},"SceneDataProvider")," state changes using ",(0,r.kt)("inlineCode",{parentName:"p"},"subscribeToStata")," method of the ",(0,r.kt)("inlineCode",{parentName:"p"},"SceneObjectBase"),":"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-ts"},"class CustomObject extends SceneObjectBase<CustomObjectState> {\n  constructor() {\n    super({});\n    this.addActivationHandler(() => this.activationHandler());\n  }\n\n  private activationHandler() {\n    const sourceData = sceneGraph.getData(this);\n\n    this._subs.add(sourceData.subscribeToState((state) => console.log(state)));\n  }\n}\n")),(0,r.kt)("admonition",{type:"info"},(0,r.kt)("p",{parentName:"admonition"},"Not that the subscription returned from ",(0,r.kt)("inlineCode",{parentName:"p"},"sourceData.subscribeToState")," is added to ",(0,r.kt)("inlineCode",{parentName:"p"},"this._subs"),". Thanks to that, you don't need to do any cleanup when the custom object is destroyed, as the library will take care of unsubscribing.")),(0,r.kt)("h2",{id:"use-time-range"},"Use time range"),(0,r.kt)("p",null,"Similarly to data, you can use the closest time range in custom scene object. Use ",(0,r.kt)("inlineCode",{parentName:"p"},"sceneGraph.getTimeRange(model)")," to get the closest time range scene object. This method can be used both in the custom object class and rendere as describe in above in ",(0,r.kt)("a",{parentName:"p",href:"#use-data"},"Use data")," section"))}p.isMDXComponent=!0}}]);