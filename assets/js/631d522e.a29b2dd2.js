"use strict";(self.webpackChunkwebsite=self.webpackChunkwebsite||[]).push([[609],{876:(e,t,n)=>{n.d(t,{Zo:()=>u,kt:()=>v});var a=n(2784);function r(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function s(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);t&&(a=a.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,a)}return n}function o(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?s(Object(n),!0).forEach((function(t){r(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):s(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function i(e,t){if(null==e)return{};var n,a,r=function(e,t){if(null==e)return{};var n,a,r={},s=Object.keys(e);for(a=0;a<s.length;a++)n=s[a],t.indexOf(n)>=0||(r[n]=e[n]);return r}(e,t);if(Object.getOwnPropertySymbols){var s=Object.getOwnPropertySymbols(e);for(a=0;a<s.length;a++)n=s[a],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(r[n]=e[n])}return r}var c=a.createContext({}),l=function(e){var t=a.useContext(c),n=t;return e&&(n="function"==typeof e?e(t):o(o({},t),e)),n},u=function(e){var t=l(e.components);return a.createElement(c.Provider,{value:t},e.children)},d="mdxType",p={inlineCode:"code",wrapper:function(e){var t=e.children;return a.createElement(a.Fragment,{},t)}},h=a.forwardRef((function(e,t){var n=e.components,r=e.mdxType,s=e.originalType,c=e.parentName,u=i(e,["components","mdxType","originalType","parentName"]),d=l(n),h=r,v=d["".concat(c,".").concat(h)]||d[h]||p[h]||s;return n?a.createElement(v,o(o({ref:t},u),{},{components:n})):a.createElement(v,o({ref:t},u))}));function v(e,t){var n=arguments,r=t&&t.mdxType;if("string"==typeof e||r){var s=n.length,o=new Array(s);o[0]=h;var i={};for(var c in t)hasOwnProperty.call(t,c)&&(i[c]=t[c]);i.originalType=e,i[d]="string"==typeof e?e:r,o[1]=i;for(var l=2;l<s;l++)o[l]=n[l];return a.createElement.apply(null,o)}return a.createElement.apply(null,n)}h.displayName="MDXCreateElement"},3787:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>c,contentTitle:()=>o,default:()=>p,frontMatter:()=>s,metadata:()=>i,toc:()=>l});var a=n(7896),r=(n(2784),n(876));const s={id:"advanced-behaviors",title:"Behaviors"},o=void 0,i={unversionedId:"advanced-behaviors",id:"advanced-behaviors",title:"Behaviors",description:"With behaviors you can implement custom scene logic that will be performed as a side effect. Behaviors are useful for performing side effects like conditionally hiding elements on a scene or attaching shared functionalities across scene objects.",source:"@site/../docs/advanced-behaviors.md",sourceDirName:".",slug:"/advanced-behaviors",permalink:"/scenes/docs/advanced-behaviors",draft:!1,editUrl:"https://github.com/grafana/scenes/edit/main/docusaurus/website/../docs/advanced-behaviors.md",tags:[],version:"current",frontMatter:{id:"advanced-behaviors",title:"Behaviors"},sidebar:"sidebar",previous:{title:"Variables in custom scene objects",permalink:"/scenes/docs/advanced-variables"},next:{title:"Custom data sources",permalink:"/scenes/docs/advanced-custom-datasource"}},c={},l=[{value:"Defining a behavior",id:"defining-a-behavior",level:2},{value:"Behaviors as pure functions",id:"behaviors-as-pure-functions",level:3},{value:"Behaviors as scene objects",id:"behaviors-as-scene-objects",level:3},{value:"Built-in behaviors",id:"built-in-behaviors",level:2},{value:"<code>ActWhenVariableChanged</code>",id:"actwhenvariablechanged",level:3},{value:"Usage",id:"usage",level:4},{value:"<code>CursorSync</code>",id:"cursorsync",level:3},{value:"Usage",id:"usage-1",level:4},{value:"Source code",id:"source-code",level:2}],u={toc:l},d="wrapper";function p(e){let{components:t,...n}=e;return(0,r.kt)(d,(0,a.Z)({},u,n,{components:t,mdxType:"MDXLayout"}),(0,r.kt)("p",null,"With behaviors you can implement custom scene logic that will be performed as a side effect. Behaviors are useful for performing side effects like conditionally hiding elements on a scene or attaching shared functionalities across scene objects."),(0,r.kt)("h2",{id:"defining-a-behavior"},"Defining a behavior"),(0,r.kt)("p",null,"Behaviors can be implemented in two ways:"),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},"As a pure function that gets called when its parent is activated."),(0,r.kt)("li",{parentName:"ul"},"As a scene object that is activated when its parent is activated.")),(0,r.kt)("p",null,"Behaviors can be attached to scene objects using ",(0,r.kt)("inlineCode",{parentName:"p"},"$behaviors")," state property. For example, you can attach behaviors to a ",(0,r.kt)("inlineCode",{parentName:"p"},"SceneQueryRunner"),":"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-ts"},"const queryRunner = new SceneQueryRunner({\n  $behaviors: [\n    /* list of behaviors */\n  ],\n\n  datasource: {\n    type: 'prometheus',\n    uid: 'gdev-prometheus',\n  },\n  queries: [\n    {\n      refId: 'A',\n      range: true,\n      format: 'time_series',\n      expr: 'rate(prometheus_http_requests_total[5m])',\n    },\n  ],\n});\n")),(0,r.kt)("h3",{id:"behaviors-as-pure-functions"},"Behaviors as pure functions"),(0,r.kt)("p",null,"Behaviors can be implemented as a stateless function that gets called when behavior parent is activated. This function can return a deactivation handler to be called when parent is deactivated."),(0,r.kt)("p",null,"Below you will find a simple stateless behavior that will log in the developer console when behavior's parent activates/deactivates or its state changes."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-ts"},"const StatelessLoggerBehavior = (parent: SceneObject) => {\n  console.log(`${parent.state.key} activated`);\n\n  parent.subscribeToState(() => {\n    console.log(`${parent.state.key} state changed`);\n  });\n\n  return () => {\n    console.log(`${parent.state.key} deactivated`);\n  };\n};\n")),(0,r.kt)("h3",{id:"behaviors-as-scene-objects"},"Behaviors as scene objects"),(0,r.kt)("p",null,"Implementing a behavior as a scene object is exactly the same as implementing a custom scene object. The example bellow illustrates an extended logger behavior from the previous example that will log in the developer console when a scene object activates/deactivates, and batch parent state updates logs based on provided configuration:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-tsx"},"interface StatefulLoggerBehaviorState extends SceneObjectState {\n  // Size of the batch of state updates\n  batchStateUpdates: number;\n}\n\nclass StatefulLoggerBehavior extends SceneObjectBase<StatefulLoggerBehaviorState> {\n  private _batchedStateUpdates: Array<SceneObjectState> = [];\n\n  constructor(state: Partial<StatefulLoggerBehaviorState>) {\n    super({\n      batchStateUpdates: 5,\n      ...state,\n    });\n    this.addActivationHandler(this._onActivate);\n  }\n\n  private _onActivate = () => {\n    const parent = this.parent;\n\n    if (!parent) {\n      throw new Error('LoggerBehavior must be attached to a parent object');\n    }\n\n    console.log(`StatefulLoggerBehavior: ${parent.state.key} activated`);\n\n    parent.subscribeToState(() => {\n      this._batchedStateUpdates.push(parent.state);\n\n      if (this._batchedStateUpdates.length === this.state.batchStateUpdates) {\n        console.log(`StatefulLoggerBehavior: ${parent.state.key} state changed batch`, this._batchedStateUpdates);\n        this._batchedStateUpdates = [];\n      }\n    });\n\n    return () => {\n      console.log(`StatefulLoggerBehavior: ${parent.state.key} deactivated`);\n    };\n  };\n}\n")),(0,r.kt)("h2",{id:"built-in-behaviors"},"Built-in behaviors"),(0,r.kt)("p",null,"Scenes library comes with the following, built-in behaviors:"),(0,r.kt)("h3",{id:"actwhenvariablechanged"},(0,r.kt)("inlineCode",{parentName:"h3"},"ActWhenVariableChanged")),(0,r.kt)("p",null,"Performs a side effect when a variable changes."),(0,r.kt)("h4",{id:"usage"},"Usage"),(0,r.kt)("p",null,"Assuming there is a variable named ",(0,r.kt)("inlineCode",{parentName:"p"},"myVariable")," in a scene, you can configure side effect to be performed when it's value changes:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-ts"},"import { behaviors } from '@grafana/scenes';\n\nconst logWhenVariableChanges = new behaviors.ActWhenVariableChanged({\n  variableName: 'myVariable',\n  onChange: (variable) => {\n    console.log(`myVariable value changed: ${variable.state.value}`);\n  },\n});\n")),(0,r.kt)("h3",{id:"cursorsync"},(0,r.kt)("inlineCode",{parentName:"h3"},"CursorSync")),(0,r.kt)("p",null,"Creates a shared cursor scope for configuring cursor sync across multiple panels."),(0,r.kt)("h4",{id:"usage-1"},"Usage"),(0,r.kt)("p",null,"In the example below the ",(0,r.kt)("inlineCode",{parentName:"p"},"CursorSync")," behavior is used to synchronise cursor across all panels in a scene:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-ts"},"import {\n  behaviors,\n  EmbeddedScene,\n  PanelBuilders,\n  SceneFlexItem,\n  SceneFlexLayout,\n  SceneQueryRunner,\n  SceneTimeRange,\n} from '@grafana/scenes';\n\nconst httpRequests = new SceneQueryRunner({\n  datasource: {\n    type: 'prometheus',\n    uid: 'gdev-prometheus',\n  },\n  queries: [\n    {\n      refId: 'A',\n      range: true,\n      format: 'time_series',\n      expr: 'rate(prometheus_http_requests_total[5m])',\n    },\n  ],\n});\n\nconst cpuUsage = new SceneQueryRunner({\n  datasource: {\n    type: 'prometheus',\n    uid: 'gdev-prometheus',\n  },\n  queries: [\n    {\n      refId: 'A',\n      expr: 'avg by (job, instance, mode) (rate(node_cpu_seconds_total[5m]))',\n    },\n  ],\n});\n\nconst scene = new EmbeddedScene({\n  $timeRange: new SceneTimeRange({ from: 'now-5m', to: 'now' }),\n  $behaviors: [new behaviors.CursorSync({ key: 'cursor-sync-scope', sync: DashboardCursorSync.Tooltip })],\n  body: new SceneFlexLayout({\n    direction: 'row',\n    children: [\n      new SceneFlexItem({\n        width: '50%',\n        height: 300,\n        body: PanelBuilders.timeseries().setData(httpRequests).setTitle('HTTP Requests').build(),\n      }),\n      new SceneFlexItem({\n        width: '50%',\n        height: 300,\n        body: PanelBuilders.timeseries()\n          .setTitle('CPU Usage')\n          .setTimeRange(new SceneTimeRange({ from: 'now-6h', to: 'now' }))\n          .setData(cpuUsage)\n          .build(),\n      }),\n    ],\n  }),\n});\n")),(0,r.kt)("h2",{id:"source-code"},"Source code"),(0,r.kt)("p",null,(0,r.kt)("a",{parentName:"p",href:"https://github.com/grafana/scenes/tree/main/docusaurus/docs/advanced-behaviors.tsx"},"View the example source code")))}p.isMDXComponent=!0}}]);