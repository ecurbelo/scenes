"use strict";(self.webpackChunkwebsite=self.webpackChunkwebsite||[]).push([[801],{876:(e,t,r)=>{r.d(t,{Zo:()=>l,kt:()=>y});var n=r(2784);function a(e,t,r){return t in e?Object.defineProperty(e,t,{value:r,enumerable:!0,configurable:!0,writable:!0}):e[t]=r,e}function o(e,t){var r=Object.keys(e);if(Object.getOwnPropertySymbols){var n=Object.getOwnPropertySymbols(e);t&&(n=n.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),r.push.apply(r,n)}return r}function u(e){for(var t=1;t<arguments.length;t++){var r=null!=arguments[t]?arguments[t]:{};t%2?o(Object(r),!0).forEach((function(t){a(e,t,r[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(r)):o(Object(r)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(r,t))}))}return e}function s(e,t){if(null==e)return{};var r,n,a=function(e,t){if(null==e)return{};var r,n,a={},o=Object.keys(e);for(n=0;n<o.length;n++)r=o[n],t.indexOf(r)>=0||(a[r]=e[r]);return a}(e,t);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);for(n=0;n<o.length;n++)r=o[n],t.indexOf(r)>=0||Object.prototype.propertyIsEnumerable.call(e,r)&&(a[r]=e[r])}return a}var c=n.createContext({}),i=function(e){var t=n.useContext(c),r=t;return e&&(r="function"==typeof e?e(t):u(u({},t),e)),r},l=function(e){var t=i(e.components);return n.createElement(c.Provider,{value:t},e.children)},d="mdxType",p={inlineCode:"code",wrapper:function(e){var t=e.children;return n.createElement(n.Fragment,{},t)}},m=n.forwardRef((function(e,t){var r=e.components,a=e.mdxType,o=e.originalType,c=e.parentName,l=s(e,["components","mdxType","originalType","parentName"]),d=i(r),m=a,y=d["".concat(c,".").concat(m)]||d[m]||p[m]||o;return r?n.createElement(y,u(u({ref:t},l),{},{components:r})):n.createElement(y,u({ref:t},l))}));function y(e,t){var r=arguments,a=t&&t.mdxType;if("string"==typeof e||a){var o=r.length,u=new Array(o);u[0]=m;var s={};for(var c in t)hasOwnProperty.call(t,c)&&(s[c]=t[c]);s.originalType=e,s[d]="string"==typeof e?e:a,u[1]=s;for(var i=2;i<o;i++)u[i]=r[i];return n.createElement.apply(null,u)}return n.createElement.apply(null,r)}m.displayName="MDXCreateElement"},8543:(e,t,r)=>{r.r(t),r.d(t,{assets:()=>c,contentTitle:()=>u,default:()=>p,frontMatter:()=>o,metadata:()=>s,toc:()=>i});var n=r(7896),a=(r(2784),r(876));const o={id:"advanced-custom-datasource",title:"Custom data source"},u=void 0,s={unversionedId:"advanced-custom-datasource",id:"advanced-custom-datasource",title:"Custom data source",description:"If you want to query a custom resource API you can register a runtime data source. There are great benefits as you can then leverage SceneQueryRunner.",source:"@site/../docs/advanced-custom-datasource.md",sourceDirName:".",slug:"/advanced-custom-datasource",permalink:"/scenes/docs/advanced-custom-datasource",draft:!1,editUrl:"https://github.com/grafana/scenes/edit/main/docusaurus/website/../docs/advanced-custom-datasource.md",tags:[],version:"current",frontMatter:{id:"advanced-custom-datasource",title:"Custom data source"},sidebar:"sidebar",previous:{title:"Variables in custom scene objects",permalink:"/scenes/docs/advanced-variables"}},c={},i=[],l={toc:i},d="wrapper";function p(e){let{components:t,...r}=e;return(0,a.kt)(d,(0,n.Z)({},l,r,{components:t,mdxType:"MDXLayout"}),(0,a.kt)("p",null,"If you want to query a custom resource API you can register a runtime data source. There are great benefits as you can then leverage SceneQueryRunner."),(0,a.kt)("p",null,"SceneQueryRunner does a lot of complex work for you like:"),(0,a.kt)("ul",null,(0,a.kt)("li",{parentName:"ul"},"Wait for variables to complete (if your queries depend on them)"),(0,a.kt)("li",{parentName:"ul"},"Re-execute variables when time range change"),(0,a.kt)("li",{parentName:"ul"},"Figure out if variables changed while in-active")),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-typescript"},"\n class MyCustomDS extends RuntimeDataSource {\n  query(request: DataQueryRequest<DataQuery>): Promise<DataQueryResponse> | Observable<DataQueryResponse> {\n    return Promise.resolve({\n      state: LoadingState.Done,\n      data: [\n        {\n          fields: [{ name: 'Values', type: FieldType.number, values: [1, 2, 3], config: {} }],\n          length: 3,\n        },\n      ],\n    });\n  }\n\n  testDatasource(): Promise<TestDataSourceResponse> {\n    return Promise.resolve({ status: 'success', message: 'OK' });\n  }\n}\n\n// Important to specify a unique pluginId and uid for your data source that is unlikely to confict with any other scene app plugin.\nsceneUtils.registerRuntimeDataSource({ dataSource: new MyCustomDS('my-custom-ds', 'my-custom-ds-uid') });\n\n")),(0,a.kt)("p",null,"You can now use this data source in SceneQueryRunner queries using the same uid. If you want to mix queries to standard data sources and your custom data source in the same SceneQueryRunner use the mixed data source."),(0,a.kt)("p",null,"Example:"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-typescript"},"  $data: new SceneQueryRunner({\n    datasource: { uid: '-- Mixed --' },\n    queries: [\n      { refId: 'A', datasource: { uid: 'my-prometheus' }, expr: '<my prometheus query>' },\n      { refId: 'B', datasource: { uid: 'my-custom-ds-uid' }, expr: '<my prometheus query>' },\n    ]\n  })\n\n")))}p.isMDXComponent=!0}}]);