"use strict";(self.webpackChunkwebsite=self.webpackChunkwebsite||[]).push([[458],{876:(e,n,t)=>{t.d(n,{Zo:()=>s,kt:()=>g});var a=t(2784);function r(e,n,t){return n in e?Object.defineProperty(e,n,{value:t,enumerable:!0,configurable:!0,writable:!0}):e[n]=t,e}function l(e,n){var t=Object.keys(e);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);n&&(a=a.filter((function(n){return Object.getOwnPropertyDescriptor(e,n).enumerable}))),t.push.apply(t,a)}return t}function o(e){for(var n=1;n<arguments.length;n++){var t=null!=arguments[n]?arguments[n]:{};n%2?l(Object(t),!0).forEach((function(n){r(e,n,t[n])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(t)):l(Object(t)).forEach((function(n){Object.defineProperty(e,n,Object.getOwnPropertyDescriptor(t,n))}))}return e}function i(e,n){if(null==e)return{};var t,a,r=function(e,n){if(null==e)return{};var t,a,r={},l=Object.keys(e);for(a=0;a<l.length;a++)t=l[a],n.indexOf(t)>=0||(r[t]=e[t]);return r}(e,n);if(Object.getOwnPropertySymbols){var l=Object.getOwnPropertySymbols(e);for(a=0;a<l.length;a++)t=l[a],n.indexOf(t)>=0||Object.prototype.propertyIsEnumerable.call(e,t)&&(r[t]=e[t])}return r}var p=a.createContext({}),d=function(e){var n=a.useContext(p),t=n;return e&&(t="function"==typeof e?e(n):o(o({},n),e)),t},s=function(e){var n=d(e.components);return a.createElement(p.Provider,{value:n},e.children)},u="mdxType",c={inlineCode:"code",wrapper:function(e){var n=e.children;return a.createElement(a.Fragment,{},n)}},m=a.forwardRef((function(e,n){var t=e.components,r=e.mdxType,l=e.originalType,p=e.parentName,s=i(e,["components","mdxType","originalType","parentName"]),u=d(t),m=r,g=u["".concat(p,".").concat(m)]||u[m]||c[m]||l;return t?a.createElement(g,o(o({ref:n},s),{},{components:t})):a.createElement(g,o({ref:n},s))}));function g(e,n){var t=arguments,r=n&&n.mdxType;if("string"==typeof e||r){var l=t.length,o=new Array(l);o[0]=m;var i={};for(var p in n)hasOwnProperty.call(n,p)&&(i[p]=n[p]);i.originalType=e,i[u]="string"==typeof e?e:r,o[1]=i;for(var d=2;d<l;d++)o[d]=t[d];return a.createElement.apply(null,o)}return a.createElement.apply(null,t)}m.displayName="MDXCreateElement"},6269:(e,n,t)=>{t.r(n),t.d(n,{assets:()=>p,contentTitle:()=>o,default:()=>c,frontMatter:()=>l,metadata:()=>i,toc:()=>d});var a=t(7896),r=(t(2784),t(876));const l={id:"scene-app-drilldown",title:"Drill-down pages in Scenes apps"},o=void 0,i={unversionedId:"scene-app-drilldown",id:"scene-app-drilldown",title:"Drill-down pages in Scenes apps",description:"Drill-down pages are a powerful tool for building complex, data-driven applications. They allow you to create a high-level overview of the data that a user can interact with and progressively explore to reveal underlying data.",source:"@site/../docs/scene-app-drilldown.md",sourceDirName:".",slug:"/scene-app-drilldown",permalink:"/scenes/docs/scene-app-drilldown",draft:!1,editUrl:"https://github.com/grafana/scenes/edit/main/docusaurus/website/../docs/scene-app-drilldown.md",tags:[],version:"current",frontMatter:{id:"scene-app-drilldown",title:"Drill-down pages in Scenes apps"},sidebar:"sidebar",previous:{title:"Tab navigation in Scenes apps",permalink:"/scenes/docs/scene-app-tabs"},next:{title:"Custom scene objects",permalink:"/scenes/docs/advanced-custom-scene-objects"}},p={},d=[{value:"Add drill-down pages to Scenes apps",id:"add-drill-down-pages-to-scenes-apps",level:2},{value:"Step 1. Create a Scenes app",id:"step-1-create-a-scenes-app",level:3},{value:"Step 2. Build a top level drill-down page",id:"step-2-build-a-top-level-drill-down-page",level:3},{value:"Step 3. Set up drill-down navigation",id:"step-3-set-up-drill-down-navigation",level:3},{value:"Step 4. Build a drill-down page",id:"step-4-build-a-drill-down-page",level:3},{value:"Step 5. Build a drill-down scene",id:"step-5-build-a-drill-down-scene",level:3},{value:"Complete example",id:"complete-example",level:3}],s={toc:d},u="wrapper";function c(e){let{components:n,...t}=e;return(0,r.kt)(u,(0,a.Z)({},s,t,{components:n,mdxType:"MDXLayout"}),(0,r.kt)("p",null,"Drill-down pages are a powerful tool for building complex, data-driven applications. They allow you to create a high-level overview of the data that a user can interact with and progressively explore to reveal underlying data."),(0,r.kt)("h2",{id:"add-drill-down-pages-to-scenes-apps"},"Add drill-down pages to Scenes apps"),(0,r.kt)("p",null,(0,r.kt)("inlineCode",{parentName:"p"},"SceneAppPage")," comes with an API that allows you to create deep, nested drill-down pages."),(0,r.kt)("admonition",{type:"info"},(0,r.kt)("p",{parentName:"admonition"},(0,r.kt)("strong",{parentName:"p"},"Before you begin"),": You must already know about React Router URL params, Grafana field configuration, and data links before continuing with this guide.")),(0,r.kt)("p",null,"To create a drill-down page, use the ",(0,r.kt)("inlineCode",{parentName:"p"},"drilldown")," property of the ",(0,r.kt)("inlineCode",{parentName:"p"},"SceneAppPage")," object."),(0,r.kt)("h3",{id:"step-1-create-a-scenes-app"},"Step 1. Create a Scenes app"),(0,r.kt)("p",null,"Follow the ",(0,r.kt)("a",{parentName:"p",href:"/scenes/docs/scene-app"},"Building apps with Scenes guide")," to build your app."),(0,r.kt)("h3",{id:"step-2-build-a-top-level-drill-down-page"},"Step 2. Build a top level drill-down page"),(0,r.kt)("p",null,"Use the code that follows to build a page that shows a summary of the average duration of HTTP requests for Prometheus API endpoints, using Grafana's Table panel:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-ts"},"function getOverviewScene() {\n  const queryRunner = new SceneQueryRunner({\n    $timeRange: new SceneTimeRange(),\n    datasource: {\n      type: 'prometheus',\n      uid: '<PROVIDE_GRAFANA_DS_UID>',\n    },\n    queries: [\n      {\n        refId: 'A',\n        expr: 'sort_desc(avg by(handler) (rate(prometheus_http_request_duration_seconds_sum {}[5m]) * 1e3))',\n        format: 'table',\n        instant: true,\n      },\n    ],\n  });\n\n  const tablePanel = new VizPanel({\n    $data: queryRunner,\n    title: 'Average duration of HTTP request',\n    pluginId: 'table',\n  });\n\n  return new EmbeddedScene({\n    body: new SceneFlexLayout({\n      direction: 'column',\n      children: [\n        new SceneFlexItem({\n          minHeight: 300,\n          body: tablePanel,\n        }),\n      ],\n    }),\n  });\n}\n\nfunction getSceneApp() {\n  return new SceneApp({\n    pages: [\n      new SceneAppPage({\n        title: 'HTTP handlers overview',\n        url: '/a/<PLUGIN_ID>/my-app',\n        getScene: getOverviewScene,\n      }),\n    ],\n  });\n}\n")),(0,r.kt)("h3",{id:"step-3-set-up-drill-down-navigation"},"Step 3. Set up drill-down navigation"),(0,r.kt)("p",null,"To show the drill-down page, you need to provide navigation. Configure Table panel data links (learn about data links in the ",(0,r.kt)("a",{parentName:"p",href:"https://grafana.com/docs/grafana/latest/panels-visualizations/configure-data-links/"},"official Grafana documentation"),"). Then modify the Table panel configuration to set up a data link for the ",(0,r.kt)("inlineCode",{parentName:"p"},"handler")," field:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-tsx"},"import { sceneUtils } from '@grafana/scenes';\n\n// ...\n\nconst tablePanel = new VizPanel({\n  $data: queryRunner,\n  title: 'Average duration of HTTP request',\n  pluginId: 'table',\n  fieldConfig: {\n    defaults: {},\n    overrides: [\n      {\n        matcher: {\n          id: 'byName',\n          options: 'handler',\n        },\n        properties: [\n          {\n            id: 'links',\n            value: [\n              {\n                title: 'Go to handler overview',\n                onBuildUrl: ({ replaceVariables }: { replaceVariables: InterpolateFunction }) => {\n                  return sceneUtils.getUrlWithAppState(\n                    replaceVariables('/a/<PLUGIN_ID>/my-app/${__value.text:percentencode}'),\n                    params\n                  );\n                },\n              },\n            ],\n          },\n        ],\n      },\n    ],\n  },\n});\n")),(0,r.kt)("p",null,"The resulting panel will have links for all values of the ",(0,r.kt)("inlineCode",{parentName:"p"},"handler"),' field. Clicking a value will redirect to a particular endpoint drill-down URL that will show a "Not found page" error. You\'ll set up this page in the next step.'),(0,r.kt)("admonition",{type:"note"},(0,r.kt)("p",{parentName:"admonition"},"The ",(0,r.kt)("inlineCode",{parentName:"p"},"fieldConfig")," options are the same options you would see in typical dashboard panels when you view ",(0,r.kt)("strong",{parentName:"p"},"Panel JSON")," from the Table panel inspect drawer. To access panel inspect drawer, click ",(0,r.kt)("strong",{parentName:"p"},"Inspect")," in the panel edit menu.")),(0,r.kt)("admonition",{type:"info"},(0,r.kt)("p",{parentName:"admonition"},(0,r.kt)("inlineCode",{parentName:"p"},"${__value.text:percentencode}")," is the percent-encoded value of the clicked table cell. When using variables in drilldown links make sure to call ",(0,r.kt)("inlineCode",{parentName:"p"},"replaceVariables")," available via argument of ",(0,r.kt)("inlineCode",{parentName:"p"},"onBuildUrl")," function, before passing the URL to ",(0,r.kt)("inlineCode",{parentName:"p"},"sceneUtils.getUrlWithAppState")," helper.")),(0,r.kt)("h3",{id:"step-4-build-a-drill-down-page"},"Step 4. Build a drill-down page"),(0,r.kt)("p",null,"Modify the ",(0,r.kt)("inlineCode",{parentName:"p"},"getSceneApp")," function to set up drill-down scenes. Use the ",(0,r.kt)("inlineCode",{parentName:"p"},"drilldowns")," property of the ",(0,r.kt)("inlineCode",{parentName:"p"},"SceneAppPage")," object. The ",(0,r.kt)("inlineCode",{parentName:"p"},"drilldowns")," property accepts an array of ",(0,r.kt)("inlineCode",{parentName:"p"},"SceneAppDrilldownView")," objects. It allows a drill-down URL and page to be rendered configuration:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-ts"},"export interface SceneAppDrilldownView {\n  /** Use to provide parametrized drilldown URL, for example, /app/clusters/:clusterId **/\n  routePath: string;\n  /** Function that returns a page object for a given drilldown route match. Use parent to configure drilldown view parent SceneAppPage via getParentPage method. **/\n  getPage: (routeMatch: SceneRouteMatch<any>, parent: SceneAppPageLike) => SceneAppPageLike;\n}\n")),(0,r.kt)("p",null,"Configure the API endpoint drill-down view:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-tsx"},"function getSceneApp() {\n  return new SceneApp({\n    pages: [\n      new SceneAppPage({\n        title: 'HTTP handlers overview',\n        url: '/a/<PLUGIN_ID>/my-app',\n        getScene: getOverviewScene,\n        drilldowns: [\n          {\n            routePath: '/a/<PLUGIN_ID>/my-app/:handler',\n            getPage: getHandlerDrilldownPage,\n          },\n        ],\n      }),\n    ],\n  });\n}\n")),(0,r.kt)("p",null,"Define a function that returns a ",(0,r.kt)("inlineCode",{parentName:"p"},"SceneAppPage")," for a drill-down view. This function receives two arguments:"),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"routeMatch")," - Contains information about URL params."),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"parentPage")," - Contains a reference to the parent ",(0,r.kt)("inlineCode",{parentName:"li"},"SceneAppPage")," required to configure breadcrumbs correctly.")),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-ts"},"function getHandlerDrilldownPage(routeMatch: SceneRouteMatch<{ handler: string }>, parent: SceneAppPageLike) {\n  // Retrieve handler from the URL params\n  const handler = decodeURIComponent(routeMatch.params.handler);\n\n  return new SceneAppPage({\n    // Set up a particular handler drill-down URL\n    url: `/a/<PLUGIN_ID>/my-app/${encodeURIComponent(handler)}`,\n    // Important: Set this up for breadcrumbs to be built\n    getParentPage: () => parent,\n    title: `${handler} endpoint overview`,\n    getScene: () => getHandlerDrilldownScene(handler),\n  });\n}\n")),(0,r.kt)("h3",{id:"step-5-build-a-drill-down-scene"},"Step 5. Build a drill-down scene"),(0,r.kt)("p",null,"Define a scene that will be rendered on the drill-down page:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-ts"},"function getHandlerDrilldownScene(handler: string) {\n  const requestsDuration = new SceneQueryRunner({\n    datasource: {\n      type: 'prometheus',\n      uid: '<PROVIDE_GRAFANA_DS_UID>',\n    },\n    queries: [\n      {\n        refId: 'A',\n        expr: `avg without(job, instance) (rate(prometheus_http_request_duration_seconds_sum{handler=\"${handler}\"}[5m])) * 1e3`,\n      },\n    ],\n  });\n\n  const requestsCount = new SceneQueryRunner({\n    datasource: {\n      type: 'prometheus',\n      uid: '<PROVIDE_GRAFANA_DS_UID>',\n    },\n    queries: [\n      {\n        refId: 'A',\n        expr: `sum without(job, instance) (rate(prometheus_http_request_duration_seconds_count{handler=\"${handler}\"}[5m])) `,\n      },\n    ],\n  });\n\n  return new EmbeddedScene({\n    body: new SceneFlexLayout({\n      direction: 'column',\n      children: [\n        new SceneFlexItem({\n          minHeight: 300,\n          body: new VizPanel({\n            $data: requestsDuration,\n            title: 'Requests duration',\n            pluginId: 'timeseries',\n          }),\n        }),\n        new SceneFlexItem({\n          minHeight: 300,\n          body: new VizPanel({\n            $data: requestsCount,\n            title: 'Requests count',\n            pluginId: 'timeseries',\n          }),\n        }),\n      ],\n    }),\n  });\n}\n")),(0,r.kt)("h3",{id:"complete-example"},"Complete example"),(0,r.kt)("p",null,"Below you'll find the complete code for a Scenes app with drill-down pages:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-tsx"},"function getOverviewScene() {\n  const queryRunner = new SceneQueryRunner({\n    $timeRange: new SceneTimeRange(),\n    datasource: {\n      type: 'prometheus',\n      uid: '<PROVIDE_GRAFANA_DS_UID>',\n    },\n    queries: [\n      {\n        refId: 'A',\n        expr: 'sort_desc(avg by(handler) (rate(prometheus_http_request_duration_seconds_sum {}[5m]) * 1e3))',\n        format: 'table',\n        instant: true,\n      },\n    ],\n  });\n\n  const tablePanel = new VizPanel({\n    $data: queryRunner,\n    title: 'Average duration of HTTP request',\n    pluginId: 'table',\n    fieldConfig: {\n      defaults: {},\n      overrides: [\n        {\n          matcher: {\n            id: 'byName',\n            options: 'handler',\n          },\n          properties: [\n            {\n              id: 'links',\n              value: [\n                {\n                  title: 'Go to handler overview',\n                  onBuildUrl: ({ replaceVariables }: { replaceVariables: InterpolateFunction }) => {\n                    return sceneUtils.getUrlWithAppState(\n                      replaceVariables('/a/<PLUGIN_ID>/my-app/${__value.text:percentencode}'),\n                      params\n                    );\n                  },\n                },\n              ],\n            },\n          ],\n        },\n      ],\n    },\n  });\n\n  return new EmbeddedScene({\n    body: new SceneFlexLayout({\n      direction: 'column',\n      children: [\n        new SceneFlexItem({\n          minHeight: 300,\n          body: tablePanel,\n        }),\n      ],\n    }),\n  });\n}\n\nfunction getHandlerDrilldownPage(routeMatch: SceneRouteMatch<{ handler: string }>, parent: SceneAppPageLike) {\n  // Retrieve handler from the URL params.\n  const handler = decodeURIComponent(routeMatch.params.handler);\n\n  return new SceneAppPage({\n    // Setup particular handler drilldown URL\n    url: `/a/<PLUGIN_ID>/my-app/${encodeURIComponent(handler)}`,\n    // Important: setup this for breadcrumbs to be built\n    getParentPage: () => parent,\n    title: `${handler} endpoint overview`,\n    getScene: () => getHandlerDrilldownScene(handler),\n  });\n}\n\nfunction getHandlerDrilldownScene(handler: string) {\n  const requestsDuration = new SceneQueryRunner({\n    datasource: {\n      type: 'prometheus',\n      uid: '<PROVIDE_GRAFANA_DS_UID>',\n    },\n    queries: [\n      {\n        refId: 'A',\n        expr: `avg without(job, instance) (rate(prometheus_http_request_duration_seconds_sum{handler=\"${handler}\"}[5m])) * 1e3`,\n      },\n    ],\n  });\n\n  const requestsCount = new SceneQueryRunner({\n    datasource: {\n      type: 'prometheus',\n      uid: '<PROVIDE_GRAFANA_DS_UID>',\n    },\n    queries: [\n      {\n        refId: 'A',\n        expr: `sum without(job, instance) (rate(prometheus_http_request_duration_seconds_count{handler=\"${handler}\"}[5m])) `,\n      },\n    ],\n  });\n\n  return new EmbeddedScene({\n    body: new SceneFlexLayout({\n      direction: 'column',\n      children: [\n        new SceneFlexItem({\n          minHeight: 300,\n          body: new VizPanel({\n            $data: requestsDuration,\n            title: 'Requests duration',\n            pluginId: 'timeseries',\n          }),\n        }),\n        new SceneFlexItem({\n          minHeight: 300,\n          body: new VizPanel({\n            $data: requestsCount,\n            title: 'Requests count',\n            pluginId: 'timeseries',\n          }),\n        }),\n      ],\n    }),\n  });\n}\n\nfunction getSceneApp() {\n  return new SceneApp({\n    pages: [\n      new SceneAppPage({\n        title: 'HTTP handlers overview',\n        url: '/a/<PLUGIN_ID>/my-app',\n        getScene: getOverviewScene,\n        drilldowns: [\n          {\n            routePath: '/a/<PLUGIN_ID>/my-app/:handler',\n            getPage: getHandlerDrilldownPage,\n          },\n        ],\n      }),\n    ],\n  });\n}\n")))}c.isMDXComponent=!0}}]);